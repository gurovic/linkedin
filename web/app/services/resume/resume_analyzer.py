import requests
import json
import os

DEEPSEEK_API_URL = "https://api.deepseek.com/v1/chat/completions"
DEEPSEEK_API_KEY = os.environ.get('DEEPSEEK_API_KEY')


def analyze_resume(text):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç —Ä–µ–∑—é–º–µ –≤ DeepSeek API.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON —Å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º, –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã –∏ –Ω–∞–≤—ã–∫–∞–º–∏.
    """
    prompt = f"""
You are an information extraction assistant. 
Given the following resume text, extract the following structured information:

1. Education: A list of universities the person studied at, with start_year and end_year.
2. Work Experience: A list of jobs with fields "company", "position", "start_year", "end_year".
3. Skills: A list of technical or professional skills.

Return strictly in JSON format like:
{{
  "education": [
    {{
      "university": "University Name",
      "start_year": 2015,
      "end_year": 2019
    }}
  ],
  "work_experience": [
    {{
      "company": "Company Name",
      "position": "Job Title",
      "start_year": 2020,
      "end_year": 2022
    }}
  ],
  "skills": ["Python", "Public Speaking"]
}}

Only return the JSON. Do not include any extra text.

Resume text:
\"\"\"
{text}
\"\"\"
"""

    headers = {
        "Authorization": f"Bearer {DEEPSEEK_API_KEY}",
        "Content-Type": "application/json"
    }

    payload = {
        "model": "deepseek-chat",
        "messages": [
            {"role": "system", "content": "You are a resume parsing assistant."},
            {"role": "user", "content": prompt}
        ],
        "temperature": 0.3
    }

    try:
        response = requests.post(DEEPSEEK_API_URL, headers=headers, json=payload)
        response.raise_for_status()

        # üîç –ü–µ—á–∞—Ç–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç DeepSeek
        print("=== –û–¢–í–ï–¢ –û–¢ DEEPSEEK ===")
        print(response.text)

        data = response.json()

        # ‚úÖ –ü–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ–º—Å—è –ø–æ–¥ —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –æ—à–∏–±–æ–∫
        if "error" in data:
            return {"error": f"DeepSeek error: {data['error']}"}
        if "detail" in data:
            return {"error": f"DeepSeek says: {data['detail']}"}

        # ‚úÖ –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –Ω—É–∂–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        content = data.get("choices", [{}])[0].get("message", {}).get("content", "")
        if not content:
            return {"error": "Empty content from DeepSeek"}

        # ‚úÖ –£–±–∏—Ä–∞–µ–º Markdown-–æ–±—ë—Ä—Ç–∫—É ```json ... ```
        if content.startswith("```json"):
            content = content.strip("` \n")  # —É–¥–∞–ª—è–µ—Ç ```json –∏ ```
            content = content.replace("json", "", 1).strip()

        # ‚úÖ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—Å—Ç –≤ JSON
        return json.loads(content)

    except requests.exceptions.RequestException as e:
        print(f"Request error: {e}")
        return {"error": "Failed to communicate with DeepSeek API"}

    except (KeyError, json.JSONDecodeError) as e:
        print(f"Response parsing error: {e}")
        return {"error": "Unexpected response format from DeepSeek"}